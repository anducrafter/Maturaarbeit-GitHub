<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <script> 
      function timeleft(milliseconds,uuid) {
        milliseconds = parseInt(milliseconds);
                const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
                if(milliseconds - Date.now() <= 0)return "Auktion beendet am " + new Date((milliseconds)).toLocaleDateString(undefined,options);
              
                if ( milliseconds - Date.now() > 86400000) return new Date(milliseconds).toLocaleDateString(undefined, options);
                
                const now = Date.now();
                const remainingTime = milliseconds - now;
                let h = Math.floor(remainingTime / 3600000);
                let m = Math.floor((remainingTime % 3600000) / 60000);
                let s = Math.floor((remainingTime % 60000) / 1000);
                return `${h} Stunden ${m} Minuten ${s} Sekunden`;
            }
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
            function setTime(milliseconds,uuid){
              const timerElement = document.getElementById(`timer-`+uuid);
              timerElement.innerText =timeleft(milliseconds,uuid)
              const countdown = setInterval(() => {
                
                if ((milliseconds - Date.now()) < 0) {
                          clearInterval(countdown);
                          timerElement.innerText = timeleft(milliseconds,uuid)
                      }
              
              timerElement.innerText =timeleft(milliseconds,uuid)
              },1000);
            }
         
      </script>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>

<body>
  <main class="container mx-auto p-4 pl-12">
    
    <div class="auction-cards grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 justify-center">
      <% if (auctions.length > 0) { %>
        <% auctions.forEach(auc => { %>
          <div class="card bg-white shadow-md rounded-lg p-3 flex flex-col items-center">
            <a href="http://localhost:5000/au/<%= auc._id%>" class="mb-4 w-full">
              <div class="w-full h-64  flex items-center justify-center overflow-hidden rounded-lg">
                <img class="object-cover w-full h-full" src="/uploads/<%= auc.img[0] %>" alt="<%= auc.titel %>">
              </div>
            </a>
            <h3 class="text-xl font-bold text-gray-900 mb-2">  Startgebot: <%= auc.startbit %></h3>
            <h4 class="text-lg text-gray-600 mb-4"><%= auc.titel %> </h4>
            <h5 class="text-gray-600" id="timer-<%= auc._id %>">
              <script>
                setTime("<%= auc.timestamp %>", "<%= auc._id %>");
              </script>
            </h5>
          </div>
        <% }) %>
      <% } %>
    </div>

  </main>

  <div class="flex place-content-center">
    <nav aria-label="Page navigation example">
      <ul class="flex items-center -space-x-px h-10 text-base" id="pagination">
        <!-- Pagination items will be dynamically inserted here by JavaScript -->
      </ul>
    </nav>
  </div>
  <script>
    // Total number of pages (for example, you can fetch this from the server)
    const totalPages = Math.ceil('<%=lenght%>'); // Example: Assume there are 25 total pages.
    const maxVisiblePages = 10; // Max number of page links to show
  
    // Get the current page from the URL query parameter
    const urlParams = new URLSearchParams(window.location.search);
    let currentPage = parseInt(urlParams.get('page')) || 1; // Defaults to page 1 if no query
  
    // Function to create pagination links
    function createPagination() {
      const paginationContainer = document.getElementById('pagination');
      paginationContainer.innerHTML = ''; // Clear existing pagination
  
      // Calculate the start and end of the visible page range
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
  
      // Adjust start and end if we're near the beginning or end of the page range
      if (endPage - startPage < maxVisiblePages - 1) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
  
      // Previous button
      const prevItem = document.createElement('li');
      const prevLink = document.createElement('a');
      prevLink.href = `?page=${currentPage - 1}`;
      prevLink.className = `flex items-center justify-center px-4 h-10 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white ${
        currentPage === 1 ? 'pointer-events-none opacity-50' : ''
      }`;
      prevLink.innerHTML = `<svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/></svg>`;
      prevItem.appendChild(prevLink);
      paginationContainer.appendChild(prevItem);
  
      // Page numbers
      for (let i = startPage; i <= endPage; i++) {
        const listItem = document.createElement('li');
        const pageLink = document.createElement('a');
        pageLink.href = `?page=${i}`;
        pageLink.className = `flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white ${
          i === currentPage ? 'text-blue-600 border-blue-300 bg-blue-50 dark:bg-gray-700 dark:text-white' : ''
        }`;
        pageLink.innerText = i;
        listItem.appendChild(pageLink);
        paginationContainer.appendChild(listItem);
      }
  
      // Next button
      const nextItem = document.createElement('li');
      const nextLink = document.createElement('a');
      nextLink.href = `?page=${currentPage + 1}`;
      nextLink.className = `flex items-center justify-center px-4 h-10 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white ${
        currentPage === totalPages ? 'pointer-events-none opacity-50' : ''
      }`;
      nextLink.innerHTML = `<svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/></svg>`;
      nextItem.appendChild(nextLink);
      paginationContainer.appendChild(nextItem);
    }
  
    // Initialize pagination on page load
    createPagination();
  </script>
 
</body>
</html>